#!/usr/bin/env perl
# Copyright (C) 2015, CERN
# This software is distributed under the terms of the GNU General Public
# Licence version 3 (GPL Version 3), copied verbatim in the file "LICENSE".
# In applying this license, CERN does not waive the privileges and immunities
# granted to it by virtue of its status as Intergovernmental Organization
# or submit itself to any jurisdiction.


# Extension of the base DBOD::Job class to add extra required parameters
package DBOD::PG::snapshot;
use Moose;

extends 'DBOD::Job';

with 'MooseX::Getopt::Usage',
     'MooseX::Getopt::Usage::Role::Man';

# Main 
package main;

use strict;
use warnings;

use Log::Log4perl qw(:easy);
use DBOD::Runtime;
use DBOD::Runtime_Zapi;
use DBOD::PG;
use Data::Dumper;

# Initiates logger
BEGIN { 
    Log::Log4perl->easy_init() ;
}

my $job = DBOD::PG::snapshot->new_with_options();
my $runtime_zapi  = DBOD::Runtime_Zapi->new;
my $runtime = DBOD::Runtime->new;
my $pg = DBOD::PG->new;

sub body {
	$job->log->debug('Executing snapshot job on '. $job->entity );
	my($entity);
	$entity = 'dod_' . $job->entity;	
	my($isrunning) = $pg->check_state($job->metadata->{'bindir'} . "/pg_ctl",$job->metadata->{'datadir'});

	if ( $isrunning == 0 ) {
		$job->log->error("You are not allowed to take an snapshot while database is not running.");
		$job->_output(1);
		return 1;
	}
	my($cmd,$rc,@output,$user_storage,$mountpoint);

	#look for mountpoints
	my($pg_datadir_nosuffix) = $job->metadata->{'datadir'};
	$pg_datadir_nosuffix =~ s/\/data\/?$//g;  
	
	my($server_zapi,$volume_name);
	my($arref)= $runtime_zapi->GetServerAndVolname($pg_datadir_nosuffix);

	if (defined($$arref[0])) {
		$server_zapi=$$arref[0];
	} else {
		$job->log->error("server_zapi could not be generated!");
              $job->_output(1);
		return 1;
       }
	if (defined($$arref[1])) {
		$volume_name=$$arref[1];
	} else {
		$job->log->error("volume information could not be retrieved!");
              $job->_output(1);
		return 1;
       }
 
	#create snapshot label
	my($timetag)=`date +%d%m%Y_%H%M%S`; 
	chomp $timetag;
	my($version)=$runtime->GetVersionDB($job->metadata->{'datadir'} . "/current-version");
	if (! defined $version) {
		 $job->log->error("No version found strange.");
               $job->_output(1);
               $job->_result(1);
		 return 1;
	} 
       $job->log->debug("PostgreSQL version <$version>");

	my($snapname) = "snapscript_" . $timetag . "_" . $version;
	
	#Ensure that you can create an snapshot
	$rc=$runtime_zapi->SnapPrepare($server_zapi,$volume_name,254); # last number indicate the maximum allowed. It can be configured 
	if ($rc == 0 ) {
		$job->log->debug("Error preparing <$volume_name> for snapshot !");
	}  else {
		$job->log->debug("Success preparing volume: <$volume_name> for snapshot.");
	}


	
	#begin backup
	$cmd= $job->metadata->{'bindir'} . "/psql -h " .  $job->metadata->{'socket'} . " -p " . $job->metadata->{'port'} . " -c \"SELECT pg_start_backup('$snapname')\";";
	$job->log->debug("running command to begin backup: <$cmd> ");
	@output=();
	$rc=$runtime->RunStr($cmd,\@output); 
	if ($rc == 0) {
		$job->log->error("Setting db in backup mode didnt work!!:   <@output>");
		$job->_output(1);
		return 1;
	} else {
		$job->log->debug("Database in backup mode!");
	}
	
	#create snapshot
	$rc=$runtime_zapi->SnapCreate($server_zapi,$volume_name,$snapname); 
	my($errorflag)=0;
	if ($rc == 0 ) {
		$errorflag=1;
		$job->log->debug("Error creating snapshot: <$snapname> on volume: <$volume_name> !");
	}  else {
		$job->log->error("Success creating snapshot: <$snapname> on volume: <$volume_name>.!");
	}		
	
	if ($isrunning) { #running instance
		#begin backup
		#my $appender = Log::Log4perl->appender_by_name("file");
		#print $appender->filename($);
		my($logfileinuse);
		my $share_dir = File::ShareDir::dist_dir('DBOD');
		if ( -e "$share_dir/logger.conf" ) {
			@output = ();
			@output = $runtime->ReadFile("$share_dir/logger.conf");
			if ($rc) {
				foreach (@output) {
					if (/^log4perl.appender.file.filename = (.*)$/) {
						$logfileinuse=$1;
						chomp $logfileinuse;
						$job->log->debug("Log file in use: <$logfileinuse>");
						last;
					}
				}
			}
		} 	
		
		if (defined  $logfileinuse) {
			$cmd="PGOPTIONS='--client-min-messages=warning' " . $job->metadata->{'bindir'} . "/psql -h " .  $job->metadata->{'socket'} . " -p " . $job->metadata->{'port'} . " -q -L $logfileinuse -c \"SELECT pg_stop_backup(),  pg_create_restore_point('$snapname')\";";
		} else { 
			$cmd="PGOPTIONS='--client-min-messages=warning' " . $job->metadata->{'bindir'} . "/psql -h " . $job->metadata->{'socket'} . " -p " . $job->metadata->{'port'} . " -q  -c \"SELECT pg_stop_backup(),  pg_create_restore_point('$snapname')\";";
		}
		$job->log->debug("Running command to end backup: <$cmd> ");  
		@output=();
		$rc=$runtime->RunStr($cmd,\@output);
		if ($rc == 0) {
			$job->log->debug("Setting db in backup mode didnt work!!:   <@output>");
			$job->_output(1);
			return 1;
		} else {
			$job->log->debug("Database in normal state !");
		}
	}

	if ($errorflag) {
		$job->log->debug("Please check, like snapshot was not properly taken. Contact admins!.");
		$job->_output(1);
		return 1;
	} else {
		$job->log->debug("Backup operation is successfully over");
		$job->_output(0);
		return 0;
	
	}
}

$job->run(\&body);
