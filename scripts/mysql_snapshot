#!/usr/bin/env perl
# Copyright (C) 2015, CERN
# This software is distributed under the terms of the GNU General Public
# Licence version 3 (GPL Version 3), copied verbatim in the file "LICENSE".
# In applying this license, CERN does not waive the privileges and immunities
# granted to it by virtue of its status as Intergovernmental Organization
# or submit itself to any jurisdiction.


# Extension of the base DBOD::Job class to add extra required parameters
package DBOD::MySQL::snapshot;
use Moose;

extends 'DBOD::Job';

with 'MooseX::Getopt::Usage',
     'MooseX::Getopt::Usage::Role::Man';

# Main 
package main;

use strict;
use warnings;

use Log::Log4perl qw(:easy);
use DBOD::Runtime;
use DBOD::Runtime_Zapi;
use Data::Dumper;

# Initiates logger
BEGIN { 
    Log::Log4perl->easy_init() ;
}

my $job = DBOD::MySQL::snapshot->new_with_options();
my $runtime_zapi  = DBOD::Storage::NetApp::ZAPI->new;
my $runtime = DBOD::Runtime->new;

sub body {
	$job->log->debug('Executing snapshot job on '. $job->entity );

	my($localmycnf);
	if ( -r $ENV{"HOME"} . "/.my.cnf" ) {
		$localmycnf=1; #a priori we dont need to use user and password they are in the .my.cnf 
		$job->log->debug('local <~mysql/.my.cnf> in use');
	} else {
		$localmycnf=0;
	}
	my($my_cnf)=$job->metadata->{'datadir'} . '/my.cnf';
	$job->log->debug('File my.cnf exists at <'.  $my_cnf .'>');
	if (! (-e $job->metadata->{'datadir'} && -e $my_cnf) ){
		$job->log->error("Either directory: <" . $job->metadata->{'datadir'}. "> or file: <$my_cnf> doesnt exist. Check entity definition!");	
		
	} 

	my($mntpoint,@arrpath,$index);
	$mntpoint=$job->metadata->{'datadir'};
	@arrpath = split '/',$mntpoint;
	$index=$#arrpath -1;
	$mntpoint = join '/',@arrpath[0..$index];
	
	my($server_zapi,$volume_name);
	my($arref)= $runtime_zapi->get_server_and_volname($mntpoint);

	if (defined($$arref[0])) {
		$server_zapi=$$arref[0];
	} else {
		 $job->log->error("Server_zapi could not be generated!");
		 $job->_output(1);
               return;
       }
	if (defined($$arref[1])) {
		$volume_name=$$arref[1];
	} else {
		$job->log->error("Volume information could not be retrieved!");
		$job->_output(1);
		return;
	}

	#Check is instance is running

	my ($cmd,$instance_down,$rc);
	$rc=0;
	$instance_down=0;
	$rc=$runtime->run_str("ps -elf | grep -i datadir=" . $job->metadata->{'datadir'} . " | grep -v grep");

	if ($rc == 0) {
		$job->log->error("No instance running");
		$instance_down=1;
	} 
	
	if ($instance_down) {
		$job->log->error("Snapshots can only be done while instance is running. Please check.");
		$job->_output(1);
		return;
	}
	
	#Get actual binary log, flush logs, lock tables and take snapshot

	my($logsequence,$log_prefix,$logsequence_stop,@output);
	$logsequence=0;
	if (! $instance_down) {
#print "AAAAAA: " . $job->config->{'mysql'}->{'helper_locateactualbinary'} . "\n";
#print "BBBBBB: " . Dumper $job->config ;
 
		if (! -e $job->config->{'mysql'}->{'helper_locateactualbinary'} ) {
			$job->log->error("File <" . $job->config->{'mysql'}->{'helper_locateactualbinary'} . "> missing. Please check!");
			$job->_output(1);
			return;
		}
		if ($localmycnf) {
			$cmd= $job->metadata->{'bindir'} . "/mysql --socket=" . $job->metadata->{'socket'} . "<" . $job->config->{'mysql'}->{'helper_locateactualbinary'};
			$job->log->debug("command: <$cmd>");
		} else {
			$cmd= $job->metadata->{'bindir'} . "/mysql -u " . $job->config->{'mysql'}->{'db_user'} . " -p" . $job->config->{'mysql'}->{'db_password'} . " --socket=" . $job->metadata->{'socket'} . " < " . $job->config->{'mysql'}->{'helper_locateactualbinary'};
		}
	
		# $fake = 0
		$rc=$runtime->run_str($cmd,\@output,0,$job->metadata->{'bindir'}. "/mysql --socket=" . $job->metadata->{'socket'} . " < " . $job->config->{'mysql'}->{'helper_locateactualbinary'} );
		if ($rc) {
			foreach (@output) {
				if (/^(.*?)\.(\d+)\s+\d+/) {
					$job->log->debug("<$1>.<$2> actual binary log sequence");
					$logsequence=$2;
					$log_prefix=$1;
					last;
				}
			}
		}
		if (! defined $logsequence || ! defined $log_prefix) {
			$job->log->error("Actual logsequence couldnt be determined. Please check.");
			$job->_output(1);
			return;
		}
	} 
	
	# Prepare the snapshot 
	
	if ( (! -e $job->config->{'mysql'}->{'helper_presnap'} || ! -e $job->config->{'mysql'}->{'helper_postsnap'} ) &&  ! $instance_down ) {
		$job->log->error("Actions to be run before snapshot not present. Please check.");
		$job->_output(1);
		return;
	} 

	#Ensure we can take an snapshot
	$rc=$runtime_zapi->snap_prepare($server_zapi,$volume_name,2); # last number indicate the maximum allowed. It can be configured
	if ($rc == 0 ) {
		$job->log->debug("Error preparing <$volume_name> for snapshot !");
	}  else {
		$job->log->debug("Success preparing volume: <$volume_name> for snapshot.");
	}
 	my $actual_version = $runtime->get_instance_version($job->metadata->{version});

	if (! defined  $actual_version) {
		$job->log->error("A version of MySQL must be defined.");
		$job->_output(1);
		return;
	}
	
	$rc=0;
	@output=();
	if ($localmycnf) {
		$cmd=$job->metadata->{'bindir'}. "/mysql --socket=" . $job->metadata->{'socket'} . " < " . $job->config->{'mysql'}->{'helper_presnap'};
	} else {
		$cmd=$job->metadata->{'bindir'} . "/mysql -u " . $job->config->{'mysql'}->{'db_user'} . " -p" . $job->config->{'mysql'}->{'db_password'} . " --socket=" . $job->metadata->{'socket'} . " < " . $job->config->{'mysql'}->{'helper_presnap'} ;
	}
	
	$rc=$runtime->run_str($cmd,\@output,0,$job->metadata->{'bindir'} . "/mysql --socket=" . $job->metadata->{'socket'} . " < " . $job->config->{'mysql'}->{'helper_presnap'} );
	if (! $rc) {
		$job->log->error("Presnap actions failed. Please check.");
		$job->_output(1);
		return;
	} else {
		$job->log->debug("Presnap actions completed successfully.");
		$job->log->debug("Master status:\n @output");		 
	} 
	
	# Take snapshot
	my($timetag)=`date +%d%m%Y_%H%M%S`; 
	chomp $timetag;
	if ($logsequence > 0) {
		$logsequence++;	 
	} 
	my($snapname);
	$snapname = "snapscript_" . $timetag . "_" . $logsequence . "_" . $actual_version;	
	@output=();  

	$rc=$runtime_zapi->snap_create($server_zapi,$volume_name,$snapname);
	my($errorflag)=0;
	if ($rc == 0 ) {
		$errorflag=1;
		$job->log->debug("Error creating snapshot: <$snapname> on volume: <$volume_name> !");
	}  else {
		$job->log->debug("Success creating snapshot: <$snapname> on volume: <$volume_name>.!"); 
	}		
	 
 	
	$rc=0;
	@output=();
	if ($localmycnf) {
		$cmd=$job->metadata->{'bindir'} . "/mysql --socket=" .  $job->metadata->{'socket'} . " < " . $job->config->{'mysql'}->{'helper_postsnap'};
		
	} else {
		$cmd=$job->metadata->{'bindir'} . "/mysql -u " . $job->config->{'mysql'}->{'db_user'} . " -p" . $job->config->{'mysql'}->{'db_password'} . " --socket=" . $job->metadata->{'socket'} . " < " . $job->config->{'mysql'}->{'helper_postsnap'} ;
	}
	
	$rc=$runtime->run_str($cmd,\@output,0,$job->metadata->{'bindir'} . "/mysql --socket=" .  $job->metadata->{'socket'} . " < " . $job->config->{'mysql'}->{'helper_postsnap'} );
	if (! $rc) {
		$job->log->error("Postsnap actions failed. Please check.");
		$job->_output(1);
		return;
	} else {
		$job->log->debug("Postnap actions completed successfully.");
	}
		
	if ($errorflag) {
		$job->log->error("Error creating snapshot.");
		$job->_output(1);
		return;
	}
	
	$job->log->debug("mysql_snapshot is over.");
	$job->_output(0);
}

$job->run(\&body);
