#!/usr/bin/env perl
# Copyright (C) 2015, CERN
# This software is distributed under the terms of the GNU General Public
# Licence version 3 (GPL Version 3), copied verbatim in the file "LICENSE".
# In applying this license, CERN does not waive the privileges and immunities
# granted to it by virtue of its status as Intergovernmental Organization
# or submit itself to any jurisdiction.


# Extension of the base DBOD::Job class to add extra required parameters
package DBOD::PG::appdynamics;
use Moose;

extends 'DBOD::Job';
with 'MooseX::Getopt::Usage',
     'MooseX::Getopt::Usage::Role::Man';

has 'enable' => (is => 'ro', isa => 'Bool', documentation => qq{Enable instance monitoring in AppDynamics} );
has 'disable' => (is => 'ro', isa => 'Bool', documentation => qq{Disable instance monitoring in AppDynamics} );
has 'check' => (is => 'ro', isa => 'Bool', documentation => qq{Check if the instance is already monitored by AppDynamics} );
has 'debug' => (is => 'ro', isa => 'Bool', documentation => qq{Print command usage} );

# Main 
package main;

use strict;
use warnings;

use Log::Log4perl;
use DBOD::Appdynamics;
use DBOD::Runtime;
use DBOD::PG;
use Data::Dumper;
use Try::Tiny;

# Initiates logger
BEGIN { 
    Log::Log4perl->easy_init() ;
}

my $job = DBOD::PG::appdynamics->new_with_options();
my $runtime = DBOD::Runtime->new; 

sub body {

	#the machine should have a profile generated
	$job->log->debug('Executing appdynamics  on '. $job->entity );

	my($rc,@output,$servername,$isappmonitored);

	$servername = $job->entity;
	$servername =~ s/dod_//g;
	if (DBOD::Appdynamics::is_enabled($servername,$job->config->{'appdynamics'}->{'appdhost'},$job->config->{'appdynamics'}->{'appdport'},$job->config->{'appdynamics'}->{'appduser'},$job->config->{'appdynamics'}->{'appdpassword'})) {
		$job->log->debug("servername: <$servername> is already monitored by AppDynamics.");
		$isappmonitored =1;
	} else {
		$job->log->debug("servername: <$servername> is not monitored by AppDynamics.");
		$isappmonitored =0;
	}

	if ($job->check) {
		if ($isappmonitored) {
			$job->log->debug("Entity: <$job->entity> -> servername: <$servername> is monitored");
			$job->_output(0);
			return 0; #ok
		} else {
			$job->log->error("Entity: <$job->entity> -> servername: <$servername> is not monitored");
			$job->_output(1);
			return 1; #not ok, not monitored
		}
	} 

	##("pg_test2","jdbc:postgresql://XXXX.cern.ch:6600/postgres","postgres",AES_ENCRYPT("XXXXXX","3XXXXXXXXXXXXXXXXXXXXXXXXX"),"POSTGRES","org.postgresql.Driver","XXXXXX.cern.ch","6600","0","0","0","mysql",AES_ENCRYPT("XXXXXX","XXXXXXXXXXXXXXXXXXXXXXXX"),"N","LINUX","XXXXXXXX","22")'
	#sub EnableAppDynamics {
	#	my($servername,$connectionstring,$username,$password,$dbtype,$drivername,$hostname,$dbport,$loggingenabled,$collectorport,$sysdba,$osusername,$ospassword,$collectos,$ostype,$oshostname,$osport,$aeskey,$appdhost,$appdport,$appduser,$appdpassword) = @_;	

	my $connectionstring = "jdbc:postgresql://" . $job->metadata->{'hosts'}[0] . ":" . $job->metadata->{'port'} . "/";
	my $functionalalias = $runtime->GetAliasFromEntity("dod_" . $job->entity); 
	if ( $functionalalias eq '0' ) {
		$job->log->debug("Entity: <$job->entity> has not a valid functional alias. Please check!");
		$functionalalias=$job->metadata->{'hosts'}[0];
	} else {
		$job->log->debug("Entity: <$job->entity> has <$functionalalias > as functional alias");
	}
	if ($job->enable && !$isappmonitored) {
		if (DBOD::Appdynamics::enable($servername,$connectionstring,$job->config->{'pgsql'}->{'db_user'},$job->config->{'pgsql'}->{'db_password'},'POSTGRES','org.postgresql.Driver',$functionalalias,$job->metadata->{'port'},0,0,0,'NULL','NULL','N','LINUX',$functionalalias,22,$job->config->{'appdynamics'}->{'aeskey'},$job->config->{'appdynamics'}->{'appdhost'},$job->config->{'appdynamics'}->{'appdport'},$job->config->{'appdynamics'}->{'appduser'},$job->config->{'appdynamics'}->{'appdpassword'})) {
			$job->log->debug("Entity: <$job->entity> -> servername: <$servername> has been enabled");
			$job->_output(0);
			return 0; #ok
		} else {
			$job->log->debug("Entity: <$job->entity> -> servername: <$servername> some error while trying to enable monitoring");
			$job->_output(1);
			return 1; #not ok, not monitored
		}
	} elsif ($job->enable && $isappmonitored)  { 
		$job->log->debug("Entity: <$job->entity> -> servername: <$servername> is already monitored");
		$job->_output(0);
		return 0; #ok
	} 
	#sub DisableAppDynamics {	
	#	my($servername,$appdhost,$appdport,$appduser,$appdpassword) = @_;

	if ($job->disable && $isappmonitored) {
		if (DBOD::Appdynamics::disable($servername,$job->config->{'appdynamics'}->{'appdhost'},$job->config->{'appdynamics'}->{'appdport'},$job->config->{'appdynamics'}->{'appduser'},$job->config->{'appdynamics'}->{'appdpassword'})) {
			$job->log->debug("Entity: <$job->entity> -> servername: <$servername> has been disabled");
			$job->_output(0);
			return 0; #ok
		} else {
			$job->log->debug("Entity: <$job->entity> -> servername: <$servername> some error while trying to disable monitoring");
			$job->_output(1);
			return 1; #not ok, not monitored
		}
	} elsif ($job->disable && !$isappmonitored) {
		$job->log->debug("Entity: <$job->entity> -> servername: <$servername> is not monitored");
		$job->_output(0);
		return 0; #ok
	}

	$job->log->error("No option was provided. Please use: [check|enable|disable]");
	$job->_output(0);
	return 0;

}

$job->run(\&body);
