#!/usr/bin/env perl
# Copyright (C) 2015, CERN
# This software is distributed under the terms of the GNU General Public
# Licence version 3 (GPL Version 3), copied verbatim in the file "LICENSE".
# In applying this license, CERN does not waive the privileges and immunities
# granted to it by virtue of its status as Intergovernmental Organization
# or submit itself to any jurisdiction.


# Extension of the base DBOD::Job class to add extra required parameters
package DBOD::Init;
use Moose;
use DBOD::Templates;
use DBOD::Network::Api;
use Data::Dumper;

extends 'DBOD::Job';
with 'MooseX::Getopt::Usage',
     'MooseX::Getopt::Usage::Role::Man';

# Traditionally named dbname parameter is now 'entity'
has 'owner' => (
    is => 'ro',
    isa => 'Str',
    required => 1,
    documentation => qq{ Database owner });

has 'subcategory' => (
    is => 'ro', 
    isa => 'Str', 
    required => 1, 
    documentation => qq{Database server: MYSQL/PG/ORACLE/InfluxDB} );
has 'type' => (
    is => 'ro', 
    isa => 'Str', 
    required => 1, 
    documentation => qq{Database type: DEV/PROD });
has 'version' => (
    is => 'ro', 
    isa => 'Str', 
    required => 1, 
    documentation => qq{Database server version: (e.g: 5.6.17, 9.4.5, ...)} );
has 'port' => (
    is => 'ro', 
    isa => 'Str', 
    required => 0, 
    documentation => qq{TCP port for the server to listen at });
has 'buffer' => (
    is => 'ro', 
    isa => 'Str', 
    required => 1, 
    default => '1',
    documentation => qq{Innodb_buffer_pool_size/shared_buffer} );
has 'hosts' => (
    is => 'ro', 
    isa => 'Str', 
    required => 1, 
    documentation => qq{Comma separated list of hosts to install the instance in} );
has 'size' => (
    is => 'ro', 
    isa => 'Str', 
    required => 1, 
    default => '10',
    documentation => qq{Data volume creation size, in GB});
has 'skip_volumes_creation' => (
    is => 'ro', 
    isa => 'Bool',
    default => '0',
    documentation => qq{If set, skip instance volumes creation} );
has 'no_ip_alias' => (
    is => 'ro',
    isa => 'Bool',
    default => '0',
    documentation => qq{If set, skip IP alias creation} );
has 'no_api' => (
        is => 'ro',
        isa => 'Bool',
        default => '0',
        documentation => qq{If set, skip API alias creation} );
has 'debug' => (
    is => 'ro', 
    isa => 'Bool', 
    documentation => qq{If set, output debug level messages} );

sub free_port {
    my ($self, $host, $type) = @_;
    my $used_ports = {};
    # Fecth host metadata from API
    my $host_instances = DBOD::Network::Api::host_metadata($host, $self->config);
    # Get list of used ports
    for my $instance (@{$host_instances}) {
        if (defined $instance->{port}) {
            $self->log->debug(sprintf("Processing (%s, %s, %s)", 
                $instance->{db_name},
                $instance->{db_type},
                $instance->{port}));
            push @{$used_ports->{$instance->{db_type}}}, int($instance->{port});
        }
    }

    # Sorting on external buffer to prevent "Useless use of sort in scalar context" warning
    while (my ($type, $arr) = each %{$used_ports}) {
        my @buf = sort @{$arr};
        $used_ports->{$type} = \@buf;
    }
    
    $self->log->debug( Dumper $used_ports); 

    my %range_start = ();
    $range_start{MYSQL} = 5500;
    $range_start{PG} = 6600;
    $range_start{InfluxDB} = 8080;
    
    my $port = $range_start{$self->subcategory};
    my $stop = $port + 50;
    if (! defined $used_ports->{$self->subcategory}) {
        # No instance of selected type found in host
        return $port;
     }
    $self->log->debug( "Checking from $port to $stop" ); 
    my @used_ports = @{$used_ports->{$self->subcategory}};
    while ($port <= $stop ) {
        my $used_port = shift @used_ports;
        if (defined($used_port)) {
            $self->log->debug("Port ${used_port} used");
            if ($port < $used_port) { 
                $self->log->debug("Found port ${port}");
                return $port;
            } elsif ($port == $used_port) {
                $port++;
                $self->log->debug("Next port to check: ${port}");
            }
        } else {
            if ($port <= $stop) {
                $self->log->debug("Found port ${port}");
                return $port;
            } else {
                $self->log->debug("Free port not found");
                return;
            }
        }
    }
}

# Main 
package main;

use strict;
use warnings;

use Log::Log4perl;
use Data::Dumper;
use DBOD;
use DBOD::Runtime;
use DBOD::Network::Api;
use DBOD::Network::IPalias;
use DBOD::Templates;
use DBOD::Monitoring::Appdynamics;

# Using the old Runtime_Zapi, as the new version is missing methods
use lib '/ORA/dbs01/syscontrol/projects/recovery/bin';
use RunTime_Zapi;

# Initiates logger
BEGIN { 
    Log::Log4perl->easy_init() ;
}


$ENV{PERL_LWP_SSL_VERIFY_HOSTNAME} = 0;
my $job = DBOD::Init->new_with_options(
    allow_empty_metadata => $TRUE,
    );

sub body {

    # Set up hash containing new instance parameters
    my $input = {};
    $input->{username} = $job->owner();
    $input->{dbname} = $job->entity();
    $input->{dbname} =~ s/\-/\_/g;
    $input->{DBNAME} = uc $input->{dbname};
    $input->{DBNAME} =~ s/\-/\_/g;
    $input->{subcategory} = $job->subcategory();
    $input->{type} = $job->type();
    $input->{version} = $job->version();
    $input->{port} = $job->port();
    $input->{size} = $job->size();
    $input->{buffer} = $job->buffer();
    my @hosts = split /,/ , $job->hosts();
    $input->{hosts} = \@hosts;

    # Try to generate port from API information if port has not been provided
    if (! defined($job->port())) {
            $input->{port} = $job->free_port($input->{hosts}->[0]);
            if (! defined $input->{port}) {
                $job->log->error("Error generting port from API information");
                $job->_result($DBOD::ERROR);
                return;
            }
        }

    if ($job->subcategory() eq 'MYSQL') {
        $input->{socket} = '/var/lib/mysql/mysql.sock.' . $input->{dbname} . '.' . $input->{port};
        $input->{buffer} = $input->{buffer} . "G";
    } elsif ($job->subcategory() eq 'PG') {
        $input->{socket} = '/var/lib/pgsql';
        $input->{buffer} = $input->{buffer} . "GB";
    }

    # If volumes are to be created
    unless ($job->skip_volumes_creation()) {

        # TODO InfluxDb type is not supported in volume creation. Temporal mask. Revert when it is supported
        my $volume_type = $input->{subcategory};
        if ($volume_type eq "InfluxDB"){
            $volume_type = "PG";
        }
        # Use dummy server to force volume creation in RAC51 Storage
        my $target_server = 'itrac51666';
        my $cmd = "/etc/init.d/syscontrol -i dfm.db-cmode DFM_create_dod_volumes_Cmode -name $input->{dbname} -size $input->{size} -server ${target_server}  -type ${volume_type} -debug";

        $job->log->debug( "Executing: $cmd" );
        my $vol_creation_output = `$cmd`;
        if (DBOD::Runtime::result_code($vol_creation_output)) {
            $job->log->error( "An error ocurred creating volumes:" );
            $job->log->error( $vol_creation_output );
            $job->_output($DBOD::ERROR);
            return;
        }

        # Fetch volumes mounting details. Will wait until details are available
        $job->log->debug("Fetching volumes server information");
        my $datavol = DBOD::Runtime::mywait(\&RunTime_Zapi::GetDODMountpoint, ("dod$input->{dbname}03", $target_server));
        my $logvol = DBOD::Runtime::mywait(\&RunTime_Zapi::GetDODMountpoint, ("dod$input->{dbname}02", $target_server));
        my ($serverdata, $data_mounting_path) = split ':', $datavol;
        my ($serverlogs, $logs_mounting_path) = split ':', $logvol;

        # Fix server name to use GPN access instead of Private Network Interface
        # Removing "-priv" suffix for RAC51 servers
        if ($input->{hosts}->[0] =~ /^db/) {
            $serverdata =~ s/-priv$//;
            $serverlogs =~ s/-priv$//;
        }
        $input->{'serverlogs'} =  $serverlogs;
        $input->{'serverdata'} =  $serverdata;
    } else {
        $input->{'serverlogs'} =  'NASLOGSERVER';
        $input->{'serverdata'} =  'NASDATASERVER';
    }

    # Create metadata entry and register in the API
    unless ($job->no_api()) {
        unless (DBOD::Network::Api::create_entity($input, $job->config) == $DBOD::OK) {
            $job->log->error("Error registering the entity in the API");
            $job->_result($DBOD::ERROR);
            return;
        }
    }
    # Create IP alias and register in API
    unless ($job->no_ip_alias()) {
        unless (DBOD::Network::IPalias::add_alias($input, $job->config) == $DBOD::OK) {
            $job->log->error( "Error registering IP Alias" );
            $job->_result( $DBOD::ERROR );
            return;
        }
    }
    # Register entity in LDAP
    $input->{entity} = 'dod_' . $job->entity;
    my $buf = 'dbod-' . $input->{dbname} . '.cern.ch';
    $buf =~ s/\_/\-/g;
    $input->{ipalias} = $buf;
    # Create metadata entry and register using the API
    unless (DBOD::Network::Ldap::create_instance($input, $job->config) == $DBOD::OK) {
        $job->log->error( "Error registering instance in LDAP" );
        $job->_result( $DBOD::ERROR );
    }

    # Register MySQL and PG instances in AppDynamics
    if (($job->subcategory() eq 'MYSQL' or $job->subcategory() eq 'PG') &&
        ($job->type() eq 'PROD' )){
        # Register entity in Appdynamics
        my $metadata = DBOD::Network::Api::get_entity_metadata($job->entity(), undef, $job->config);
        $job->log->debug( Dumper $metadata );
        if ((defined $metadata) && (scalar keys %{$metadata})) {
            unless (DBOD::Monitoring::Appdynamics::enable($job->entity, $job->config(), $metadata) == $DBOD::OK) {
                $job->log->error( "Error registering instance in AppDynamics" );
                $job->_result( $DBOD::ERROR );
            }
        } else {
            $job->log->error( "Entity not found through API. Skipping AppDynamics registration" );
            $job->_result( $DBOD::ERROR );
        }
    }
    # Job done!
    unless (defined $job->_result()){
        $job->_result($DBOD::OK);
    } # Else there was a previous non-fatal error
		# Job done!
}

$job->run(\&body, );
exit $job->_result();
