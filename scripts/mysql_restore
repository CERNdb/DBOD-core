#!/usr/bin/env perl
# Copyright (C) 2015, CERN
# This software is distributed under the terms of the GNU General Public
# Licence version 3 (GPL Version 3), copied verbatim in the file "LICENSE".
# In applying this license, CERN does not waive the privileges and immunities
# granted to it by virtue of its status as Intergovernmental Organization
# or submit itself to any jurisdiction.


# Extension of the base DBOD::Job class to add extra required parameters
package DBOD::MySQL::restore;
use Moose;

extends 'DBOD::Job';
with 'MooseX::Getopt::Usage',
     'MooseX::Getopt::Usage::Role::Man';

has 'snapshot' => (is => 'ro', isa => 'Str', required => 1, documentation => qq{Target snapshot to be restored} );
has 'pitr' => (is => 'ro', isa => 'Str', documentation => qq{In case of a PITR, format:  yyyy-mm-dd_H24:MM:SS } );
has 'help' => (is => 'ro', isa => 'Bool', documentation => qq{Print command usage} );

# Main 
package main;

use strict;
use warnings;

use Log::Log4perl;
use DBOD::Runtime;
use DBOD::CRS;
use DBOD::Runtime_Zapi;
use DBOD::MySQL;
use Data::Dumper;
use Try::Tiny;
use Time::Local;
use Time::localtime;

# Initiates logger
BEGIN { 
    Log::Log4perl->easy_init() ;
}

my $job = DBOD::MySQL::restore->new_with_options();
my $runtime_zapi  = DBOD::Storage::NetApp::ZAPI->new;
my $runtime = DBOD::Runtime->new;
my $version_mysql_snap;

sub read_directory {
    my($self,$dir,$pattern)=@_;
    $self->log->info("Parameters dir: <$dir> pattern: <$pattern>");

    my(@files);

    opendir (D,$dir) || $self->log->debug("Cannot read directory $dir : $!");
    if (defined $pattern) {
        @files = grep {/$pattern/} readdir(D);
    } else {
        @files = grep {!/^\.\.?$/} readdir(D);
    }
    closedir(D);

    return @files;
}

sub body {

	my $mysql = DBOD::Systems::MySQL->new(
		instance => $self->entity,
		metadata => $self->metadata,
	);
	$job->log->debug('Executing restore  on '. $job->entity . ' with snapshot ' . $job->snapshot);
	if (defined $job->pitr) {
		$job->log->debug('Pitr is ' . $job->pitr);
	}

	my($rc,@output,$localmycnf,$entity,$fake);
	$fake=0;
	$entity = 'dod_' . $job->entity;
    my $actual_version = $runtime->get_instance_version($job->metadata->{'version'});
	if (DBOD::Storage::NetApp::Snapshot::check_times($job->snapshot, $job->pitr, $actual_version )){
        $job->debug->error('Error validating snapshot file and/or PITR time');
        $job->_output(1);
        return 1;
    }

	if (defined $actual_version) {
		if (defined $version_mysql_snap) {
			$job->log->debug("Actual MySQL version: $actual_version");
			if ($actual_version ne $version_mysql_snap) {
				$job->log->error("Please contact DBoD admins, you are trying to restore your instance from a previous MySQL version.");
				$job->_output(1);
				return 1;
			}
		}
	} else {
		$job->log->error("Main: a version of MySQL must be defined.");
		$job->_output(1);
		return 1;
	}	 
 	
	if ( -r $ENV{"HOME"} . "/.my.cnf" ) { 
		$localmycnf=1; #a priori we dont need to use user and password they are in the .my.cnf 
		$job->log->debug("Local <~mysql/.my.cnf> in use");
	} else {
		$localmycnf=0;
	}

	#Get volumes and controllers for data
	my($mntpoint,@arrpath,$index);
	$mntpoint=$job->metadata->{'datadir'};
	@arrpath = split '/',$mntpoint;
	$index=$#arrpath -1;
	$mntpoint = join '/',@arrpath[0..$index];
	
	#Get information about the volume to work with. Following handles both 7-mode and C-mode use case
	my($server_zapi,$volume_name);
	my($arref)= $runtime_zapi->get_server_and_volname($mntpoint);

	if (defined($$arref[0])) {
		$server_zapi=$$arref[0];
	} else {
		 $job->log->error("server_zapi could not be generated!");
               $job->_output(1);
		 return 1;
	}
	if (defined($$arref[1])) {
		$volume_name=$$arref[1];
	} else {
		$job->log->error("volume information could not be retrieved!");
              $job->_output(1);
		return 1;
	}

	#Check if instance is running
	my ($cmd,$instance_down);
	$rc=0;
	$instance_down=0;
	$rc=$runtime->run_str("ps -elf | grep -i datadir=" . $job->metadata->{'datadir'} . " | grep -v grep");

	if ($rc == 0) {
		$job->log->debug("No instance running");
		$instance_down=1;
	}
	
	if (! $instance_down ) { # we need to shutdown the instance
		#put the instance down
		if ($job->metadata->{'crs_ref'}) {
			$rc = DBOD::Systems::CRS::stop_resource($entity, $job->config->{'mysql'}->{'oracle_crs'});
		}
		else {
			$rc = $mysql->stop();
		}
		if ($rc) {
			$job->log->debug("Instance is down");
			$instance_down=1;
		} else	{
			$job->log->error("Problem shutting down instance. Please check.");
			$job->_output(1);
			return 1;
		}
	}

	# Perform the snap restore
	my($fromsnap);
	if ($job->snapshot =~ /snapscript_.*_(\d+)_$actual_version+$/ || $job->snapshot =~ /snapscript_.*_(\d+)+$/) {
		$fromsnap=$1;
		$job->log->debug("<$fromsnap> binlog number at the time of the snapshot.");	
	} else {
		$job->log->debug("<" . $job->snapshot . "> doesnt look good.");	
		$job->_output(1);
		return 1;
	}

	# Get all possible binarylogs
	if (! -e $job->metadata->{'binlogdir'} ) {
		$job->log->error("Location of backup not defined!");	
		$job->_output(1);
		return 1;
	}
	
	@output=();
	@output = read_directory($job->metadata->{'binlogdir'},"^binlog\\.\\d+");
		
	@output=sort(@output); 

	my($pitrlogs);
	for (my($i)=0;$i<scalar(@output);$i++) {
		if ($output[$i] =~ /binlog\..*?$fromsnap$/) {
			$pitrlogs = join(" ",@output[$i..scalar(@output)-1]);
			$job->log->debug("Binary logs to be used if PITR: <$pitrlogs>");
		}
	}
	if ( ! defined $pitrlogs || ! length($pitrlogs) > 0) {
		$job->log->error("Crash recovery will not be possible binary logs are missing!");	
		$job->_output(1);
		return 1;
	}

	#snapshot restore
	
	$rc=$runtime_zapi->snap_restore($server_zapi,$volume_name,$job->snapshot);
	my($errorflag)=0;
	if ($rc == 0 ) {
		$job->log->error("Error restoring snapshot: <" .$job->snapshot . "> on volume: <$volume_name> !");
		$job->_output(1);
		return 1;
	}  else {
		$job->log->debug("Success restoring snapshot: <" . $job->snapshot . "> on volume: <$volume_name>.!");
	}		

	
	# Start the instance and perform PITR, 
	# Start the instance & perform automatic crash recovery 
	@output=();
	$cmd="/etc/init.d/mysql_$entity start --skip-networking  >/dev/null 2>&1";
	$job->log->debug("Running <$cmd &>!!!");
	system("$cmd &");
	sleep 10;  

	#PID file
	my($file_name);
	@output=();
	$cmd="hostname";
	$rc=$runtime->run_str($cmd,\@output);
	if ($rc ==0) {
		$job->log->debug("Error executing <$cmd>!!!");
		$job->_output(1);
		return 1;
	}
	$file_name=$output[0];
	chomp $file_name;
	$file_name .= ".pid"; 
	$file_name = $job->metadata->{'datadir'} . "/$file_name";

	$rc=$runtime->wait_until_file_exist(900, $file_name); # Waits up to 900 seconds
	if ($rc==0) {
		$job->log->error("mysqld didnt recover. Please check.");
		$job->_output(1);
		return 1;
	} 
	
	# if PITR
	if (defined $job->pitr) { 
		if ($localmycnf) {
			$cmd="cd " .  $job->metadata->{'binlogdir'} . "; " . $job->metadata->{'bindir'} ."/mysqlbinlog  --disable-log-bin --stop-datetime=\"" . $job->pitr. "\" $pitrlogs | " . $job->metadata->{'bindir'} . "/mysql  --socket=" . $job->metadata->{'socket'};
		} else {
			$cmd="cd " .  $job->metadata->{'binlogdir'} . "; " . $job->metadata->{'bindir'} ."/mysqlbinlog  --disable-log-bin --stop-datetime=\"". $job->pitr . "\" $pitrlogs | " . $job->metadata->{'bindir'} . "/mysql -u " . $job->config->{'mysql'}->{'db_user'} . " -p" .$job->config->{'mysql'}->{'db_password'} . " --socket=" . $job->metadata->{'socket'};
		}

		@output=();
		$rc=$runtime->run_str($cmd,\@output,$fake,"cd " . $job->metadata->{'binlogdir'} . "; " . $job->metadata->{'bindir'} ."/mysqlbinlog --disable-log-bin --stop-datetime=\"". $job->pitr . "\" $pitrlogs | " . $job->metadata->{'bindir'} . "/mysql -u " . $job->config->{'mysql'}->{'db_user'} . " -pXXXXXX --socket=" . $job->metadata->{'socket'});
		if ($rc==0) {
			$job->log->error("Error replaying logs!!!");
			$job->_output(1);
			return 1;
		}
	} 
	
	# restart the instance
	$rc = $mysql->stop();
	if ($rc) {
		$job->log->debug("Instance is down");
		$instance_down = 1;
	} else	{
		$job->log->error("Problem shutting down instance. Please check.");
		$job->_output(1);
		return 1;
	}

	if ($job->metadata->{'crs_ref'}) {
		$rc = DBOD::Systems::CRS::start_resource($entity, $job->config->{'mysql'}->{'oracle_crs'});
	} else {
		$rc = $mysql->start();
	}	
	if ($rc) {
		$job->log->debug("Instance is up");
		$instance_down=1;
	} else	{
		$job->log->error("Problem shutting down instance. Please check.");
		$job->_output(1);
		return 1;
	}
	
	
	# The End
	$job->log->debug("mysql_restore is over.");
	$job->_output(0);
}

$job->run(\&body);
