#!/usr/bin/env perl
# Copyright (C) 2015, CERN
# This software is distributed under the terms of the GNU General Public
# Licence version 3 (GPL Version 3), copied verbatim in the file "LICENSE".
# In applying this license, CERN does not waive the privileges and immunities
# granted to it by virtue of its status as Intergovernmental Organization
# or submit itself to any jurisdiction.


# Extension of the base DBOD::Job class to add extra required parameters
package dbod_destroy;
use Moose;
use DBOD::Templates;

extends 'DBOD::Job';
with 'MooseX::Getopt::Usage',
     'MooseX::Getopt::Usage::Role::Man';

# Main 
package main;

use strict;
use warnings;

use Log::Log4perl;
use Data::Dumper;
use DBOD;
use DBOD::Runtime;
use DBOD::Network::Api;
use DBOD::Network::IPalias;
use DBOD::Templates;

# Initiates logger
BEGIN { 
    Log::Log4perl->easy_init() ;
}


my $job = dbod_destroy->new_with_options(allow_empty_metadata => $TRUE);

sub body {
    unless((defined $job->metadata) && (scalar keys %{$job->metadata})){
        $job->log->info("Metadata is not defined, nothing to delete");
        $job->_result($DBOD::OK);
	exit $job->_result();
    }
    $job->log->debug("Delete Ldap");    
    # Delete LDAP using the API
    unless (DBOD::Network::Ldap::delete_instance($job->entity, $job->config) == $DBOD::OK) {
        $job->log->error( "Error deleting instance in LDAP" );
        $job->_result( $DBOD::ERROR );
    }
    $job->log->debug("Delete IP alias");    
    # Delete IP alias
        unless (DBOD::Network::IPalias::remove_alias($job->metadata, $job->config) == $DBOD::OK) {
            $job->log->error( "Error deleting IP Alias" );
            $job->_result( $DBOD::ERROR );
            return;
    }
    # Currently we should delete from the web application, to remove also from FIM
    # $job->log->debug("Delete entity from API");    
    # delete entity from API
    #    unless (DBOD::Network::Api::delete_entity($job->entity, $job->config) == $DBOD::OK) {
    #        $job->log->error("Error deleting the entity in the API");
    #        $job->_result($DBOD::ERROR);
    #        return;
    #    }
    # Job done!
    unless (defined $job->_result()){
        $job->_result($DBOD::OK);
    } # Else there was a previous non-fatal error
		# Job done!
}

$job->run(\&body, );
exit $job->_result();
